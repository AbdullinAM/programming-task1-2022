/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package programming.task1;

import java.util.*;


public class PriceList {

    private HashMap<ProductID, Price> products = new HashMap<>();


    /*Добавление товара и его цены*/
    public void addNewProduct(String name, int code, double price ){
        products.put(new ProductID(name, code), new Price(price));
    }

    public void addNewProduct(String name, int code, int price ){
        products.put(new ProductID(name, code), new Price((double) price));
    }

    /*Изменение имени товара*/
    public void changeName (String oldName, String newName){
        for (ProductID product : products.keySet()) {if (product.getName().equals(oldName)) product.setName(newName);}
    }

    public void changeName (int code, String newName) {
        for (ProductID product : products.keySet()) {if (product.getCode() == code) product.setName(newName);}
    }

    /*Изменение цены*/
    public boolean setNewPrice (String oldName, double newPrice){
        for (ProductID product : products.keySet()) {
            if (product.getName().equals(oldName)) {
                products.replace(product, new Price(newPrice));
                return true;
            }
        }
        throw new NoSuchElementException("Элемент не найден");
    }

    public boolean setNewPrice (int code, double newPrice){
        for (ProductID product : products.keySet()) {
            if (product.getCode() == code) {
                products.replace(product, new Price(newPrice));
                return true;
            }
        }
        throw new NoSuchElementException("Элемент не найден");
    }

    /*Удаление товара*/
    public void deleteAllProductsNamed (String name) {
        ArrayList<ProductID> productsToDelete = new ArrayList<>();
        for (ProductID product : products.keySet()){
            if (product.getName().equals(name)) {
                productsToDelete.add(product);
            }
        }
        if (productsToDelete.isEmpty()) throw new NoSuchElementException("Нечего Удалять");
        else {
            for (ProductID id : productsToDelete) products.remove(id);
        }
    }

    public void deleteProduct (int code) {
        ProductID productToDelete = null;
        for (ProductID product : products.keySet()){
            if (product.getCode() == code) {
                productToDelete = product;
            }
        }
        if (productToDelete == null) throw new NoSuchElementException("Нечего удалять");
        else { products.remove(productToDelete);
        }
    }

    /*Расчёт стоимости по Имени/Коду товара и количеству экземпляров*/

    /*Если есть несколько товаров с одинаковым именем, то посчитается первый*/
    public Double calculatePrice (String name, int quantity) {
        for (Map.Entry<ProductID,Price> entry : products.entrySet()){
            if (entry.getKey().getName().equals(name)) return entry.getValue().toDouble() * quantity ;
        }
        throw new NoSuchElementException("Товар не найден");
    }

    public Double calculatePrice (int code, int quantity) {
        for (Map.Entry<ProductID,Price> entry : products.entrySet()){
            if (entry.getKey().getCode() == code) return entry.getValue().toDouble() * quantity ;
        }
        throw new NoSuchElementException("Товар не найден");
    }

    /*Функция equals и вспомогательная к ней*/
    @Override
    /*Чтобы метод вернул True, необходимо полное совпадение наборов ключ-значение (порядок не важен)*/
    public boolean equals(Object other) {
        if (this == other) return true;
        if (other == null || this.getClass() != other.getClass()) return false;
        PriceList otherPriceList = (PriceList) other;
        if (otherPriceList.products.size() != products.size()) return false;
        for (Map.Entry<ProductID, Price> entry : products.entrySet()){
            Price price = entry.getValue();
            ProductID id = entry.getKey();
            if (!products.get(id).equals(price)) return false;
        }
        return true;
    }


    @Override
    public String toString() {
        if (products.isEmpty()) return "NO PRODUCTS";
        StringBuilder SB = new StringBuilder();
        for (Map.Entry<ProductID, Price> entry:products.entrySet()){
            SB.append(entry.getKey().toString());
            SB.append(" Цена: ");
            SB.append(entry.getValue().toString());
            SB.append("\n");
        }
        SB.deleteCharAt(SB.length()-1);
        return SB.toString();
    }

}

class ProductID {
    private String name;
    private int code;

    public ProductID(String name, int code) {
        this.name = name;
        this.code = code;
    }

    public int getCode(){
        return code;
    }

    public void setCode(int code) { this.code = code; }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    @Override
    public String toString(){
        StringBuilder SB = new StringBuilder();
        SB.append('\"');
        SB.append(name);
        SB.append("\" Код: ");
        SB.append(code);
        return SB.toString();
    }

    @Override
    public boolean equals(Object other) {
        if (this == other) return true;
        if (other == null || getClass() != other.getClass()) return false;
        ProductID productID = (ProductID) other;
        return code == productID.code && name.equals(productID.name);
    }

}


class Price {
    private int rubles;
    private int pennies;

    public Price(int rubles, int pennies) {
        this.rubles = rubles;
        this.pennies = pennies;
    }
    public Price(Double number) {
        if (number < 0) throw new IllegalArgumentException("Цена не может быть отрицательной");
        double rub = number;
        double pen = number*100%100;
        this.rubles = (int) rub;
        this.pennies = (int) pen;
    }



    public int getRubles(){
        return this.rubles;
    }

    public void setRubles(int amount){
        rubles = amount;
    }

    public int getPennies(){
        return this.pennies;
    }

    public void setPennies(int amount){
        pennies = amount;
    }

    public double toDouble(){return rubles + (pennies * 0.01);}

    @Override
    public String toString(){
        StringBuilder SB = new StringBuilder();
        SB.append(rubles);
        SB.append(" рублей ");
        SB.append(pennies);
        SB.append(" копеек");
        return SB.toString();
    }

    @Override
    public boolean equals(Object other) {
        if (this == other) return true;
        if (other == null || getClass() != other.getClass()) return false;
        Price price = (Price) other;
        return rubles == price.rubles && pennies == price.pennies;
    }

}
