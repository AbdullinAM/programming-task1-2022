/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package programming.task1;

import org.checkerframework.checker.units.qual.A;
import org.junit.jupiter.api.Test;


import java.util.List;

import static org.junit.jupiter.api.Assertions.*;

class AddressBookTest {
    @Test void appAddsAddresses() {
        AddressBook book = new AddressBook();
        assertTrue(book.addPerson("Сидоров", new Address("улица Шамшева", 40, 1)));
        assertFalse(book.addPerson("Сидоров", new Address("улица Шамшева", 40, 1)));
        assertTrue(book.addPerson("Дачников", new Address("улица Песчаная", 102, 20)));
    }

    @Test void appDeletesAddresses() {
        AddressBook book = new AddressBook();
        assertTrue(book.addPerson("Анненко", new Address("улица Харченко", 16, 200)));
        assertTrue(book.addPerson("Харитонов", new Address("проспект Новикова", 3, 124)));
        assertTrue(book.addPerson("Сидельников", new Address("улица Мушкина", 50, 6)));
        assertFalse(book.deletePerson("Петров"));
        assertFalse(book.deletePerson("Мешков"));
        assertTrue(book.deletePerson("Харитонов"));
    }

    @Test void appChangesAddresses() {
        AddressBook book = new AddressBook();
        assertTrue(book.addPerson("Анненко", new Address("улица Харченко", 16, 200)));
        assertTrue(book.addPerson("Харитонов", new Address("проспект Новикова", 3, 124)));
        assertFalse(book.changeAddress("Петров", new Address("улица Пушкина", 68, 7)));
        assertTrue(book.changeAddress("Анненко", new Address("улица Наличная", 32, 1)));
    }

      @Test void addressByName() {
        AddressBook book = new AddressBook();
        Address address1 = new Address("улица Харченко", 16, 200);
        Address address2 = new Address("проспект Новикова", 3, 124);
        assertTrue(book.addPerson("Анненко", address1));
        assertTrue(book.addPerson("Харитонов", address2));
        assertEquals(address1, book.getAddressByName("Анненко"));
        assertEquals(address2, book.getAddressByName("Харитонов"));
        assertNull(book.getAddressByName("Смоленцев"));
    }

    @Test void namesByStreet() {
        AddressBook book = new AddressBook();
        assertTrue(book.addPerson("Анненко", new Address("улица Харченко", 16, 200)));
        assertTrue(book.addPerson("Харитонов", new Address("проспект Новикова", 3, 124)));
        assertTrue(book.addPerson("Михайлов", new Address("улица Харченко", 16, 4)));
        assertTrue(book.addPerson("Вишняков", new Address("улица Харченко", 17, 101)));
        Address address = new Address("улица Харченко", 17, 200);
        List<String> expected = List.of("Анненко", "Михайлов", "Вишняков");
        assertEquals(expected, book.getNamesByStreet(address));
    }

    @Test void namesByHome() {
        AddressBook book = new AddressBook();
        assertTrue(book.addPerson("Анненко", new Address("улица Харченко", 16, 200)));
        assertTrue(book.addPerson("Харитонов", new Address("проспект Новикова", 3, 124)));
        assertTrue(book.addPerson("Михайлов", new Address("улица Харченко", 16, 4)));
        assertTrue(book.addPerson("Вишняков", new Address("улица Харченко", 17, 101)));
        Address address = new Address("улица Харченко", 16, 200);
        List<String> expected = List.of("Анненко", "Михайлов");
        assertEquals(expected, book.getNamesByHome(address));
    }
}
