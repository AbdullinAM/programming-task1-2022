/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package programming.task1;

import org.checkerframework.checker.units.qual.A;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.List;

import static org.junit.jupiter.api.Assertions.*;

class AppTest {
    @Test void appAddsAddresses() {
        App book = new App();
        assertTrue(book.addPerson("Сидоров", new Address("улица Шамшева", "40", "1")));
        assertFalse(book.addPerson("Сидоров", new Address("улица Шамшева", "40", "1")));
    }

    @Test void appDeletesAddresses() {
        App book = new App();
        assertTrue(book.addPerson("Анненко", new Address("улица Харченко", "16", "200")));
        assertTrue(book.addPerson("Харитонов", new Address("проспект Новикова", "3", "124")));
        assertTrue(book.addPerson("Сидельников", new Address("улица Мушкина", "50", "6")));
        assertFalse(book.deletePerson("Петров"));
        assertFalse(book.deletePerson("Мешков"));
        assertTrue(book.deletePerson("Харитонов"));
    }

    @Test void appChangesAddresses() {
        App book = new App();
        assertTrue(book.addPerson("Анненко", new Address("улица Харченко", "16", "200")));
        assertTrue(book.addPerson("Харитонов", new Address("проспект Новикова", "3", "124")));
        assertFalse(book.changeAddress("Петров", new Address("улица Пушкина", "68", "7")));
        assertTrue(book.changeAddress("Анненко", new Address("улица Наличная", "32", "1")));
    }

      @Test void addressByName() {
        App book = new App();
        Address address1 = new Address("улица Харченко", "16", "200");
        Address address2 = new Address("проспект Новикова", "3", "124");
        assertTrue(book.addPerson("Анненко", address1));
        assertTrue(book.addPerson("Харитонов", address2));
        assertEquals(address1, book.getAddressByName("Анненко"));
        assertEquals(address2, book.getAddressByName("Харитонов"));
    }

    @Test void namesByStreet() {
        App book = new App();
        assertTrue(book.addPerson("Анненко", new Address("улица Харченко", "16", "200")));
        assertTrue(book.addPerson("Харитонов", new Address("проспект Новикова", "3", "124")));
        assertTrue(book.addPerson("Михайлов", new Address("улица Харченко", "16", "4")));
        assertTrue(book.addPerson("Вишняков", new Address("улица Харченко", "17", "101")));
        Address address = new Address("улица Харченко", "17", "200");
        assertEquals(List.of(new String[]{"Анненко", "Михайлов", "Вишняков"}), book.getNamesByStreet(address));
    }

    @Test void namesByHome() {
        App book = new App();
        assertTrue(book.addPerson("Анненко", new Address("улица Харченко", "16", "200")));
        assertTrue(book.addPerson("Харитонов", new Address("проспект Новикова", "3", "124")));
        assertTrue(book.addPerson("Михайлов", new Address("улица Харченко", "16", "4")));
        assertTrue(book.addPerson("Вишняков", new Address("улица Харченко", "17", "101")));
        Address address = new Address("улица Харченко", "16", "200");
        assertEquals(List.of(new String[]{"Анненко", "Михайлов"}), book.getNamesByHome(address));
    }
}
